/*
 ============================================================================
 Name        : c.c
 Author      : Sony
 Version     :
 Copyright   : Your copyright notice
 Description : Hello World in C, Ansi-style
 ============================================================================
 */

#include <stdio.h>
#include <stdlib.h>
#include <stdarg.h>

struct Node{
	int data;
	struct Node *next;
};


int printList(struct Node *head){
	struct Node *temp = head;
	while(temp!=NULL){
		printf("%d->", temp->data);
		temp=temp->next;
	}
	printf("NULL\n");
	return 0;

}


int insertAtHead(struct Node **head, int newData){
	//Allocate memory for newNode
	struct Node *newNode=(struct Node*)malloc(sizeof(struct Node));
	//Assign data to newNode
	newNode->data=newData;
	//Make the newNode point to the current head
	newNode->next=*head;
	//Update the head to the newNode
	*head=newNode;

	return 1;
}


int insertAtTail(struct Node **head, int newData){
	//Allocate memory to the newNode
	struct Node *newNode = (struct Node*)malloc(sizeof(struct Node));

	//Assign data to the newNode
	newNode->data=newData;
	newNode->next=NULL;

	//if the list is empty, make the newNode the head
	if(*head==NULL){
		*head=newNode;
		return 0;
	}

	// Traverse to the last node
	struct Node *temp = *head;
	while(temp->next!=NULL){
		temp=temp->next;
	}

	// Link the last node to the new node
	temp->next=newNode;
	return 1;
}

int insertAtPosition(struct Node **head, int position, int newData){
	//Allocate memmory for the newNode
	struct Node *newNode = (struct Node*)malloc(sizeof(struct Node));

	//Assign data to the newNode
	newNode->data=newData;

	//If the position is 1 make the newNode the head
	if(position==1){
		newNode->next=*head;
		*head=newNode;
	}

	//traverse to the position
	struct Node *temp = *head;
	for(int i=1; i<position-1 && temp!=NULL; i++){
		temp=temp->next;
	}

	//if the position is beyond the current list
	if(temp==NULL){
		printf("Position is out of bond");
		free(newNode);
	}

	//Insert the node
	newNode->next=temp->next;
	temp->next=newNode;
	return 1;

}


int main(void) {

	struct Node *head;
	struct Node *second;
	struct Node *third;

	head = (struct Node*)malloc(sizeof(struct Node));
	second = (struct Node*)malloc(sizeof(struct Node));
	third = (struct Node*)malloc(sizeof(struct Node));


	head->data=1;
	head->next=second;

	second->data=2;
	second->next=third;

	third->data=3;
	third->next=NULL;

	insertAtHead(&head, 10);
	insertAtHead(&head, 20);
	insertAtTail(&head, 30);
	insertAtPosition(&head,2, 22);
	insertAtPosition(&head,5, 25);

	printList(head);


	return 0;
}
